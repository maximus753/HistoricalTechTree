"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Plus, Settings } from "lucide-react"
import type { TechNode } from "@/lib/types/tech-tree"
import NodeEditor from "./node-editor"
import TechTree from "./tech-tree"
import { supabase } from "@/lib/supabaseClient"; 
import { useTechTreeState } from "@/hooks/use-tech-tree-state"
import TeacherLogin from "./teacher-login";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog"
import VisuallyHidden from "@/components/ui/visually-hidden"
import { eras, availableTags } from "@/constants/tech-tree-constants";
import { useRouter } from "next/navigation";


import { isSessionNode } from "@/utils/tech-tree-utils";
import { useTeacherAuth } from "@/hooks/use-teacher-auth";


interface TechTreeEditorProps {
  initialTechNodes: TechNode[];
}


// Categories come from tech-tree-constants

export default function TechTreeEditor({ initialTechNodes }: TechTreeEditorProps) {
  const router = useRouter()
  const {
    techNodes,
    selectedNode,
    dialogOpen,
    setDialogOpen,
    addDialogOpen,
    setAddDialogOpen,
    selectedFilterTags,
    isMounted,
    collapsedEras,
    newDevelopment,
    newLink,
    setNewLink,
    toggleEraCollapse,
    toggleNodeExpansion,
    openNodeDetails,
    toggleFilterTag,
    clearFilters,
    handleInputChange,
    handleYearTypeChange,
    handleDependencyToggle,
    addLink,
    removeLink,
    handleTagToggle,
    saveDevelopment,
    removeNodeFromSession,
  } = useTechTreeState(initialTechNodes)
  

   // This state is specific to the NodeEditor (teacher's editor)
   const [editorOpen, setEditorOpen] = useState(false)
   const [editingNode, setEditingNode] = useState<TechNode | null>(null)
   const [isSavingToDb, setIsSavingToDb] = useState(false)
   const [isDeletingFromDb, setIsDeletingFromDb] = useState(false)
   const { isTeacher, endTeacherSession } = useTeacherAuth(); 
   const [settingsOpen, setSettingsOpen] = useState(false)
   const handleAddNode = () => {
     setEditingNode(null) // Clear any previously edited node
     setEditorOpen(true)
   }
 
   const handleEditNode = (node: TechNode) => {
    if (!isTeacher && !isSessionNode(node.id)) {
      alert("This historical event has been set by the teacher.");
      return;
    }
    // We only allow editing of persistent nodes
    if (isSessionNode(node.id)) {
        alert("Session-only nodes cannot be edited persistently. They exist only for your current session.");
        return;
    }
    // Close the details dialog before opening the editor to avoid nested modals
    setDialogOpen(false)
    setEditingNode(node)
    setEditorOpen(true)
  }



  
  // Helper to strip UI-only fields from payloads before DB calls
  type DbTechNode = Omit<TechNode, 'expanded'>
  const toDbPayload = (node: TechNode): DbTechNode => {
    // Exclude UI-only properties like `expanded`
    const { expanded: _expanded, ...rest } = node
    return rest
  }

  // This function is for the TEACHER to save a node to the database
  const handleSaveNodeToDb = async (node: TechNode) => {
    console.log("Attempting to save node:", node);
    setIsSavingToDb(true)
    try {
      // If the node has a real ID (not a session ID), it's an update.
      if (editingNode) {
        console.log("Updating existing node:", node.id);
        const { id: _omitId, ...updatePayload } = toDbPayload(node)
        console.log("Update payload:", updatePayload);
        const { error } = await supabase.from("developments").update(updatePayload).eq("id", node.id)
        if (error) {
          console.error("Error updating node:", error)
          console.log("Node data:", node);
          alert(`Error updating node: ${error.message}`)
          return
        }
        // Ensure UI reflects latest server data
        router.refresh()
      } else {
        // Otherwise, it's a new node to be inserted.
        // The ID is auto-generated by the DB, so we must omit it on insert.
        const { id: _id, ...rest } = toDbPayload(node);
        const { data: { user } } = await supabase.auth.getUser();
        console.log(user);
        const { error } = await supabase.from("developments").insert([rest]);
        if (error) {
          console.error("Error creating node:", error);
          alert(`Error creating node: ${error.message}`);
          return
        }
        router.refresh()
      }
      // The real-time listener will automatically update the UI.
      setEditorOpen(false); // Close the editor dialog
    } finally {
      setIsSavingToDb(false)
    }
  }

  // This function handles deletion for both session and persistent nodes
  const handleDeleteNode = async (nodeId: string | number) => {
    if (!isTeacher && !isSessionNode(nodeId)) {
      alert("This historical event has been set by the teacher.");
      return;
    }
    console.log("Attempting to delete node:", nodeId);
    if (isSessionNode(nodeId)) {
      // It's a session node, remove it from local state
      console.log("Deleting session node:", nodeId);
      removeNodeFromSession(nodeId);
    } else {
      // It's a persistent node, remove it from the database
      console.log("Deleting persistent node:", nodeId);
      setIsDeletingFromDb(true)
      try {
        const { data: { user } } = await supabase.auth.getUser();
        console.log(user);
        const { error } = await supabase.from("developments").delete().eq("id", nodeId);
        console.log("Delete operation result:", error);
        if (error) {
          console.error("Error deleting node:", error);
          alert(`Error deleting node: ${error.message}`);
          return
        } 
        router.refresh()
        // The real-time listener will handle UI updates for all clients.
        // We can also close the dialog if the selected node was the one deleted.
        if (selectedNode && String(selectedNode.id) === String(nodeId)) {
          setDialogOpen(false);
        }
      } finally {
        setIsDeletingFromDb(false)
      }
    }
  };

  return (
    <div className="w-full h-screen flex flex-col">
      <div className="bg-slate-200 dark:bg-slate-800 border-b">
        <div className="flex flex-wrap items-center gap-3 px-4 py-3 md:flex-nowrap md:justify-between">
          <h1 className="flex-1 text-center text-xl font-bold text-slate-900 dark:text-slate-100 md:text-2xl">
            Historical Tech Tree
          </h1>
          <div className="flex flex-wrap justify-end gap-2">
            {isTeacher ? (
              <>
                <Button variant="materialFilled" onClick={handleAddNode}>
                  <Plus className="mr-2 h-4 w-4" /> Add Development to Database
                </Button>
                <Button variant="outline" onClick={endTeacherSession}>Log out</Button>
              </>
            ) : (
              <Button
                variant="outline"
                size="icon"
                aria-label="Open settings"
                onClick={() => setSettingsOpen(true)}
              >
                <Settings className="h-4 w-4" />
              </Button>
            )}
          </div>
        </div>
      </div>

      <div className="flex-1 overflow-y-auto md:overflow-hidden">
        {/* Pass all state and handlers down to the TechTree component */}
        <TechTree
          nodes={techNodes}
          onEditNode={handleEditNode}
          onDeleteNode={handleDeleteNode}
          isTeacher={isTeacher}
          // Pass all the state and handlers from the hook
          selectedNode={selectedNode}
          dialogOpen={dialogOpen}
          setDialogOpen={setDialogOpen}
          addDialogOpen={addDialogOpen}
          setAddDialogOpen={setAddDialogOpen}
          selectedFilterTags={selectedFilterTags}
          isMounted={isMounted}
          collapsedEras={collapsedEras}
          newDevelopment={newDevelopment}
          newLink={newLink}
          setNewLink={setNewLink}
          toggleEraCollapse={toggleEraCollapse}
          toggleNodeExpansion={toggleNodeExpansion}
          openNodeDetails={openNodeDetails}
          toggleFilterTag={toggleFilterTag}
          clearFilters={clearFilters}
          handleInputChange={handleInputChange}
          handleYearTypeChange={handleYearTypeChange}
          handleDependencyToggle={handleDependencyToggle}
          addLink={addLink}
          removeLink={removeLink}
          handleTagToggle={handleTagToggle}
          saveDevelopment={saveDevelopment} // This is the session-save
          isDeletingFromDb={isDeletingFromDb}
        />
      </div>

      {/* Node Editor Dialog for the TEACHER */}
      <NodeEditor
        open={editorOpen}
        onOpenChange={setEditorOpen}
        node={editingNode}
        onSave={handleSaveNodeToDb}
        onDelete={(id) => handleDeleteNode(id)}
        allNodes={techNodes} // Pass the combined list for dependency selection
        categories={availableTags}
        eras={eras.map((era) => ({ id: `${era.startYear}-${era.endYear}`, name: era.name }))}
        isSaving={isSavingToDb}
      />

      {/* Settings / Login Dialog */}
      <Dialog open={settingsOpen} onOpenChange={setSettingsOpen}>
        <DialogContent>
          <VisuallyHidden>
            <DialogTitle>Settings</DialogTitle>
          </VisuallyHidden>
          <div className="mt-2">
            <TeacherLogin onLogin={() => setSettingsOpen(false)} />
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}
